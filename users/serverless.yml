# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ElFitzChessUsers

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  custom:
    gamesTable: gamesTable
    usersTable: usersTable

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createUser:
    handler: users/createUser.createUser
    events:
      - sns:
          topicName: elFitzChessCreateUser
          displayName: New Users To Be Created pipeline
    environment:
      USERS_TABLE_NAME: ${self:usersTable}

  validateUser:
    handler: users/validateUser.validateUser
    events:
      - http:
          path: users/{id}/validate
          method: get
          cors: true
    environment:
      USERS_TABLE_NAME: ${self:usersTable}

  invalidateUser:
    handler: users/invalidateUser.invalidateUser
    events:
      - http:
          path: users/{id}/invalidate
          method: get
          cors: true
    environment:
      USERS_TABLE_NAME: ${self:usersTable}

  unsubscribeUser:
    handler: users/unsubscribeUser.unsubscribeUser
    events:
      - http:
          path: users/{id}/unsubscribe
          method: get
          cors: true
    environment:
      USERS_TABLE_NAME: ${self:usersTable}

  bouncedUser:
    handler: users/bouncedUser.bouncedUser
    events:
      - sns:
          topicName: elFitzChessBouncedEmail
          displayName: New Bounced Emails Notification pipeline
    environment:
      USERS_TABLE_NAME: ${self:usersTable}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userID
            AttributeType: S
          -
            AttributeName: emailAddress
            AttributeType: S
        KeySchema:
          -
            AttributeName: userID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:usersTable}

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
